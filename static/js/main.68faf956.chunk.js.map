{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Phonebook/Phonebook.jsx","services/LocalStorage.js","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addNewContact","id","nanoid","reset","onSubmit","this","className","htmlFor","label","type","pattern","title","required","onChange","Component","Filter","filter","ContactListItem","contact","onClick","handleDelete","ContactList","filterContacts","map","Phonebook","contacts","newContact","some","alert","prevState","idToDelete","getFilterContacts","toLowerCase","includes","savedContacts","key","JSON","parse","localStorage","getItem","error","storage","prevProps","setItem","stringify","length","React","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68faf956.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport './ContactForm.css';\n\nexport class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addNewContact({\n      name: this.state.name,\n      number: this.state.number,\n      id: nanoid(10),\n    });\n    this.reset();\n  };\n\n  reset = () => this.setState({ name: '', number: '' });\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"ContactForm\">\n        <div className=\"ContactForm__div\">\n          <label className=\"ContactForm__form__label\" htmlFor=\"text\">\n            Contact{' '}\n          </label>\n          <input\n            className=\"ContactForm__form__input\"\n            label=\"last\"\n            type=\"text\"\n            name=\"name\"\n            id=\"text\"\n            value={this.state.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"ContactForm__div\">\n          <label className=\"ContactForm__form__label\" htmlFor=\"tel\">\n            Phone Number{' '}\n          </label>\n          <input\n            className=\"ContactForm__form__input\"\n            type=\"tel\"\n            name=\"number\"\n            id=\"tel\"\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={this.handleChange}\n          />\n        </div>\n        <button className=\"ContactForm__form__btn\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Filter(props) {\n  return (\n    <div>\n      <label htmlFor=\"filter\">Filter </label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        value={props.filter}\n        onChange={props.handleChange}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.css';\n\nfunction ContactListItem(props) {\n  return (\n    <li className=\"ContactListItem\">\n      <p className=\"ContactListItem__Name\">Name: {props.contact.name}</p>\n      <p className=\"ContactListItem__Name\">Number: {props.contact.number}</p>\n      <button\n        className=\"ContactListItem__btn\"\n        type=\"button\"\n        onClick={() => props.handleDelete(props.contact.id)}\n      >\n        Delete contact\n      </button>\n    </li>\n  );\n}\n\nContactListItem.propTypes = {};\n\nexport default ContactListItem;\n","import PropTypes from 'prop-types';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport './ContactList.css';\n\nfunction ContactList({ filterContacts, handleDelete }) {\n  return (\n    <ul className=\"ContactList\">\n      {filterContacts.map(contact => (\n        <ContactListItem\n          contact={contact}\n          key={contact.id}\n          handleDelete={handleDelete}\n        />\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  filterContacts: PropTypes.array.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport * as storage from '../../services/LocalStorage';\n\nclass Phonebook extends React.Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const savedContacts = storage.get('contacts');\n    if(savedContacts){this.setState({ contacts: savedContacts })};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      storage.save('contacts', this.state.contacts);\n    }\n  }\n\n  addNewContact = newContact => {\n    const isDuplicate = this.state.contacts.some(\n      contact => contact.name === newContact.name,\n    );\n    if (isDuplicate) {\n      return alert(`${newContact.name} is already in contacts`);\n    }\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleDelete = idToDelete => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== idToDelete),\n    }));\n  };\n\n  getFilterContacts = () => {    \n    return this.state.contacts?.filter(contact =>\n      contact.name.toLowerCase().includes(this.state.filter.toLowerCase()),\n    )??[];\n  };\n\n  render() {\n    const filterContacts = this.getFilterContacts();\n    return (\n      <div>\n        <div>\n          <h1>Phonebook</h1>\n          <ContactForm addNewContact={this.addNewContact} />\n          <h2>Contacts</h2>\n          <Filter filter={this.state.filter} handleChange={this.handleChange} />\n        </div>\n        {filterContacts.length > 0 && (\n          <ContactList\n            filterContacts={filterContacts}\n            handleDelete={this.handleDelete}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Phonebook;\n","const save = (key, value) => {\n  try {\n     localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    return null;\n  }\n};\n\nconst get = key => {\n  try {\n    return  JSON.parse(localStorage.getItem(key));\n  } catch (error) {\n    return null;\n  }\n};\n\nconst remove = key => {\n  try {\n    return  localStorage.removeItem(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport { get, save, remove };\n","import { Component } from 'react';\nimport './App.css';\nimport Phonebook from './components/Phonebook/Phonebook';\n\nfunction App() {\n  return <Phonebook />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}